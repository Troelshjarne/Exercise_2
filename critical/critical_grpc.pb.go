// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package criticalpackage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationClient is the client API for Communication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationClient interface {
	JoinCluster(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Communication_JoinClusterClient, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Communication_SendMessageClient, error)
}

type communicationClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationClient(cc grpc.ClientConnInterface) CommunicationClient {
	return &communicationClient{cc}
}

func (c *communicationClient) JoinCluster(ctx context.Context, in *Channel, opts ...grpc.CallOption) (Communication_JoinClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communication_ServiceDesc.Streams[0], "/criticalpackage.Communication/joinCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicationJoinClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Communication_JoinClusterClient interface {
	Recv() (*Request, error)
	grpc.ClientStream
}

type communicationJoinClusterClient struct {
	grpc.ClientStream
}

func (x *communicationJoinClusterClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *communicationClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Communication_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communication_ServiceDesc.Streams[1], "/criticalpackage.Communication/sendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicationSendMessageClient{stream}
	return x, nil
}

type Communication_SendMessageClient interface {
	Send(*Request) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type communicationSendMessageClient struct {
	grpc.ClientStream
}

func (x *communicationSendMessageClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *communicationSendMessageClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommunicationServer is the server API for Communication service.
// All implementations must embed UnimplementedCommunicationServer
// for forward compatibility
type CommunicationServer interface {
	JoinCluster(*Channel, Communication_JoinClusterServer) error
	SendMessage(Communication_SendMessageServer) error
	mustEmbedUnimplementedCommunicationServer()
}

// UnimplementedCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationServer struct {
}

func (UnimplementedCommunicationServer) JoinCluster(*Channel, Communication_JoinClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (UnimplementedCommunicationServer) SendMessage(Communication_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedCommunicationServer) mustEmbedUnimplementedCommunicationServer() {}

// UnsafeCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationServer will
// result in compilation errors.
type UnsafeCommunicationServer interface {
	mustEmbedUnimplementedCommunicationServer()
}

func RegisterCommunicationServer(s grpc.ServiceRegistrar, srv CommunicationServer) {
	s.RegisterService(&Communication_ServiceDesc, srv)
}

func _Communication_JoinCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommunicationServer).JoinCluster(m, &communicationJoinClusterServer{stream})
}

type Communication_JoinClusterServer interface {
	Send(*Request) error
	grpc.ServerStream
}

type communicationJoinClusterServer struct {
	grpc.ServerStream
}

func (x *communicationJoinClusterServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

func _Communication_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommunicationServer).SendMessage(&communicationSendMessageServer{stream})
}

type Communication_SendMessageServer interface {
	SendAndClose(*Ack) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type communicationSendMessageServer struct {
	grpc.ServerStream
}

func (x *communicationSendMessageServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *communicationSendMessageServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Communication_ServiceDesc is the grpc.ServiceDesc for Communication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "criticalpackage.Communication",
	HandlerType: (*CommunicationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "joinCluster",
			Handler:       _Communication_JoinCluster_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "sendMessage",
			Handler:       _Communication_SendMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "critical/critical.proto",
}
